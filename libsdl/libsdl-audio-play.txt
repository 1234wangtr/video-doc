参考
    impl->DetectDevices = WINMM_DetectDevices;
    impl->OpenDevice = WINMM_OpenDevice;          打开设备
    impl->PlayDevice = WINMM_PlayDevice;          播放一段缓存中的声音，并重置一下段空闲缓存
    impl->GetDeviceBuf = WINMM_GetDeviceBuf;      获取下个播放的空闲缓存
    impl->CloseDevice = WINMM_CloseDevice;

	下面这两个等待，功能相同，只是实现方式不同？
    impl->WaitDevice = WINMM_WaitDevice;          等待上段缓存播放完成，使用了 信号量 做同步。
	                                              用 Waveform 的回调做播放完成通知，通知应用层填充新的数据
	E:\opensource\SDL2-2.0.3\src\audio\SDL_audio.c
	current_audio.impl.PlayDevice(device);
    /* Wait for an audio buffer to become available */
    current_audio.impl.WaitDevice(device);

    impl->WaitDone = WINMM_WaitDone;              每 100 毫秒，检测一次，缓存是否播放完，SDL_Delay(100);
    E:\opensource\SDL2-2.0.3\src\audio\SDL_audio.c
    /* Wait for the audio to drain[英][dreɪn] 流干.. */
    current_audio.impl.WaitDone(device);

    void (*DetectDevices) (int iscapture, SDL_AddAudioDevice addfn);
    int (*OpenDevice) (_THIS, const char *devname, int iscapture);
    void (*ThreadInit) (_THIS); /* Called by audio thread at start */
    void (*WaitDevice) (_THIS);
    void (*PlayDevice) (_THIS);
    Uint8 *(*GetDeviceBuf) (_THIS);
    void (*WaitDone) (_THIS);
    void (*CloseDevice) (_THIS);
    void (*LockDevice) (_THIS);
    void (*UnlockDevice) (_THIS);
    void (*Deinitialize) (void);

参考文件
C:\Users\wangxiangfx\Downloads\SDL2-2.0.3\src\audio\winmm\SDL_winmm.c

参考其核心逻辑代码
E:\opensource\SDL2-2.0.3\src\audio\SDL_audio.c
/* The general mixing thread function */
int SDLCALL
SDL_RunAudio(void *devicep)