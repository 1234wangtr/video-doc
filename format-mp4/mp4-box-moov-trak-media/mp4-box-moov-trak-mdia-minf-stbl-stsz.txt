aligned(8) class SampleSizeBox extends FullBox(‘stsz’, version = 0, 0) { 
 unsigned int(32) sample_size; 
 unsigned int(32) sample_count; 
  if (sample_size==0) { 
  for (i=1; i u sample_count; i++) { 
    unsigned int(32)  entry_size; 
  } 
 } 
}

version is an integer that specifies the version of this box sample_size is integer specifying the default sample size. 
If all the samples are the same size, this field contains that size value. 
If this field is set to 0, then the samples have different sizes, and those sizes are stored in the sample size table.  
If this field is not 0, it specifies the constant sample size, and no array follows.
 
sample_count is an integer that gives the number of samples in the track;
if sample-size is 0, then it is also the number of entries in the following table.
 
entry_size is an integer specifying the size of a sample, indexed by its number.

---------------------------
压缩版本的, 区别在，存储sample大小的，字段，可以用：半个字节，byte, short 等等来保存。
---------------------------
aligned(8) class CompactSampleSizeBox extends FullBox(‘stz2’, version = 0, 0) { 
  unsigned int(24)  reserved = 0; 
 unisgned int(8) field_size; 
 unsigned int(32) sample_count; 
  for (i=1; i u sample_count; i++) { 
  unsigned int(field_size)  entry_size; 
 } 
}

version is an integer that specifies the version of this box 

field_size is an integer specifying the size in bits of the entries in the following table;  
it shall take the value 4, 8 or 16.  
If the value 4 is used, then each byte contains two values: entry[i]<<4 + entry[i+1]; 
if the sizes do not fill an integral number of bytes, the last byte is padded with zeros. 

sample_count is an integer that gives the number of entries in the following table 

entry_size is an integer specifying the size of a sample, indexed by its number.

-----------------------------------
E:\libav\libavformat\isom.h
-----------------------------------
    unsigned int sample_size;
    unsigned int sample_count;
    int *sample_sizes;

-------------------------
mov.c 里面的相关代码
-------------------------
static int mov_read_stsz(MOVContext *c, AVIOContext *pb, MOVAtom atom)
{
    AVStream *st;
    MOVStreamContext *sc;
    unsigned int i, entries, sample_size, field_size, num_bytes;
    GetBitContext gb;
    unsigned char* buf;

    if (c->fc->nb_streams < 1)
        return 0;
    st = c->fc->streams[c->fc->nb_streams-1];
    sc = st->priv_data;

    avio_r8(pb); /* version */
    avio_rb24(pb); /* flags */

    if (atom.type == MKTAG('s','t','s','z')) {
        sample_size = avio_rb32(pb);
        if (!sc->sample_size) /* do not overwrite value computed in stsd */
            sc->sample_size = sample_size;
        field_size = 32;
    } else {
        sample_size = 0;
        avio_rb24(pb); /* reserved */
        field_size = avio_r8(pb);
    }
    entries = avio_rb32(pb);

    av_dlog(c->fc, "sample_size = %d sample_count = %d\n", sc->sample_size, entries);

    sc->sample_count = entries;
    if (sample_size)
        return 0;

    if (field_size != 4 && field_size != 8 && field_size != 16 && field_size != 32) {
        av_log(c->fc, AV_LOG_ERROR, "Invalid sample field size %d\n", field_size);
        return AVERROR_INVALIDDATA;
    }

    if (!entries)
        return 0;
    if (entries >= UINT_MAX / sizeof(int) || entries >= (UINT_MAX - 4) / field_size)
        return AVERROR_INVALIDDATA;
    sc->sample_sizes = av_malloc(entries * sizeof(int));
    if (!sc->sample_sizes)
        return AVERROR(ENOMEM);

    num_bytes = (entries*field_size+4)>>3;

    buf = av_malloc(num_bytes+FF_INPUT_BUFFER_PADDING_SIZE);
    if (!buf) {
        av_freep(&sc->sample_sizes);
        return AVERROR(ENOMEM);
    }

    if (avio_read(pb, buf, num_bytes) < num_bytes) {
        av_freep(&sc->sample_sizes);
        av_free(buf);
        return AVERROR_INVALIDDATA;
    }

    init_get_bits(&gb, buf, 8*num_bytes);

    for (i = 0; i < entries && !pb->eof_reached; i++) {
        sc->sample_sizes[i] = get_bits_long(&gb, field_size);
        sc->data_size += sc->sample_sizes[i];
    }

    sc->sample_count = i;

    if (pb->eof_reached)
        return AVERROR_EOF;

    av_free(buf);
    return 0;
}