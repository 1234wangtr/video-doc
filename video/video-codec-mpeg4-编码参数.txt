E:\doc\Computer software\音视频技术\video\video-codec-mpeg4-mpeg4videoenc.c

static const AVOption options[] = {
    { "data_partitioning", "Use data partitioning.",      OFFSET(data_partitioning), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, 1, VE },
    { "alternate_scan",    "Enable alternate scantable.", OFFSET(alternate_scan),    AV_OPT_TYPE_INT, { .i64 = 0 }, 0, 1, VE },
    FF_MPV_COMMON_OPTS
    { NULL },
};

参考：
https://trac.ffmpeg.org/wiki/Encode/MPEG-4

第一点： libxvid 和 native encoder(mpeg4)
The native encoder has the advantage of not requiring an external library. Both encoders should provide a similar output, but for lower bitrates/quality (e.g. 1000 kBit/s for 720p content), libxvid will deliver better quality than mpeg4

第二点： Variable Bit Rate with qscale

12:37 2015/7/11
这点，是有疑问的，AVCodecContext 没有 qscale 字段。
实际设置 qscale 的值，也没有效果。

You can select a video quality level with -qscale:v n (or the alias -q:v n), where n is a number from 1-31, with 1 being highest quality/largest filesize and 31 being the lowest quality/smallest filesize. 
This is a variable bit rate mode, roughly analogous to using -qp (constant QP [quantization parameter]) with x264. 
Most of the time this should be the preferred method.

You can select an audio quality level with -qscale:a (or the alias -q:a). 
The value changes depending on the audio encoder. 
Since this guide uses libmp3lame 
see the MP3 Encoding Guide for examples and more information.

Example:

ffmpeg -i input.avi -c:v mpeg4 -vtag xvid -qscale:v 3 -c:a libmp3lame -qscale:a 4 output.avi
There is rarely a need to use -qscale:v 1. Note that if you choose it, 
libxvid will take much more space than the same video compressed with the native mpeg4 encoder.

必须设置 FLAGS + CODEC_FLAG_QSCALE
   avctx->flags |= CODEC_FLAG_QSCALE;
   avctx->qmin = 8;
   avctx->qmax = 5;
或者
    AVDictionary *dict = NULL;
    av_dict_set(&dict, "flags", "+qscale", 0);
    av_dict_set(&dict, "qmin", "8", 0);
    av_dict_set(&dict, "qmin", "5", 0);
    ret = avcodec_open2(avctx, codec, &dict);
    av_dict_free(&dict);

第三点：Constant Bit Rate
第四点：Two-pass example
